---
title: "Guía de Instalación de Smart Model"
subtitle: "versión 10.3"
---

# 1. Introducción

En esta Guía vamos a explicar distintos modos de uso de Smart Model. Empezaremos por el uso estándar con Rstudio en <http://besmart.ar:2024/> ó [http://besmart.ar:2025/](http://besmart.ar:2024/) y terminaremos en el uso totalmente automatizado por scripts.

# 2. Rstudio en dockersrv

Contamos con dos servicios con el server de Rstudio preparado en:

-   <http://besmart.ar:2024/>

-   [http://besmart.ar:2025/](http://besmart.ar:2024/)

Los usuarios disponibles son user, user1, ..., user5, usr_test, usr_test2, ..., usr_test5.

Navegando hasta 10.3/Scripts/Tejer \*.R podremos ejecutar línea x línea usando ctrl-enter el Cuaderno requerido.

Una vez tejidos los cuadernos podremos correr los tableros en 10.3/Scripts/Servir \*.R. Los tableros los accederemos en [http://besmart.ar:2044/](http://besmart.ar:2024/){.uri} y [http://besmart.ar:2045/](http://besmart.ar:2024/){.uri} de acuerdo a si trabajamos en <http://besmart.ar:2024/> ó a <http://besmart.ar:2024/>

Este uso está pensado para uso exclusivo de Consultores. Los mismos deben acordar no usar la misma url y usuario al mismo tiempo. Se pueden usar varios usuarios en simultáneo pero hasta no contar con más recursos se recomienda un uso esporádico y liviano como demos y trabajos con muestras pequeñas en general.\
Cabe aclarar que para el uso simultáneo cada instancia requiere un browser distinto.

# 3. Rstudio local

## Requisitos

-   Al menos 20G de espacio en disco al inicio y 15G luego de la instalación.

-   4G de memoria.

-   PAT del repositorio Github de la imagen (opcional).

## Pasos

### 1

Instalar Docker Desktop. Docker corre en **`Linux`**. En Windows se instala en WSL2.\
    Los scripts descritos a continuación hay que ejecutarlos desde una terminal **bash**.

### 2

En el disco S (\\\\datasrv) ir a la carpeta `S:\Proyectos\Smart Model` y bajarse a un directorio de Trabajo los comprimidos `Automat.zip` y la imagen  `bsm-studio.tar.gz` con una buena herramienta de FTP.  
Luego, cargar la imagen docker con

  ``` bash
  docker load -i bsm-studio.tar.gz
  ```
De forma alternativa, si se cuenta con el PAT en la variable de entorno `GHCR_PAT` se puede cargar la imagen con: 

  ``` bash
  echo $GHCR_PAT | docker login -u sferro-besmart --password-stdin ghcr.io
  docker pull ghcr.io/sferro-besmart/smartmodelv2:v10.3.0
  docker logout ghcr.io
  docker tag ghcr.io/sferro-besmart/smartmodelv2:v10.3.0 bsm-studio
  ``` 

Modificar la versión `10.3.0` a la última disponible. 

### 3

Descomprimir `Automat.zip`. Se incluye un ejemplo de referencia de directorio de entrada con los archivos '`Control de SmartModelStudio.json`', '`Control de SmartModelStudio.xlsx`', `Muestra_Desarrollo.txt`, `Muestra_Scoring.txt` y `Muestra_Validación.txt.`

### 4

Abrir una terminal en el directorio de Trabajo y verificar que los .sh tengan permisos de ejecución con `ls -al`.

### 5
Verificar que se encuentra la imagen cargada en Docker Desktop Images\
    Luego se puede borrar el tar.gz para liberar espacio si se usó ese método. 

### 6
Con los comandos

    ``` bash
    ./Levantar_Contenedor.sh [--name BSM_NAME] [--port BSM_PORT] [--dashboard BSM_DASHBOARD_PORT] [--help]
    ```

    ``` bash
    ./Bajar_Contenedor.sh [BSM_NAME] [--help]
    ```

Levantamos o bajamos el contenedor con la imagen de Smartmodel.

Por ejemplo levantar con:

    ``` bash
    ./Levantar_Contenedor.sh --name Mi_SM --port 2024 --dashboard 2044
    ```

Con el contenedor corriendo podemos acceder al Rstudio en el puerto local 2024. Cuando corramos un tablero podremos acceder a él en el puerto 2044.

### 7  
Verificar que está subido el servicio abriendo con un browser localhost:2024 y logueándonos con el usuario user para entrar al Rstudio.

    Como en el caso anterior están disponibles también los usuarios user, user2, .., user5, usr_test, usr_test2, ..., usr_test5. Para un uso simultáneo cada instancia requiere un *browser* distinto. No es suficiente una pestaña o ventana distinta.

### 8
Verificar en Docker Desktop Containers las estadísticas de uso.\
    Los datos persisten aunque se apague y reinicie el Docker Desktop.\
    Prendido pero inactivo el servicio no consume muchos recursos.

### 9
Perdemos los datos sólo cuando bajamos el contenedor. Siguiendo el ejemplo:

    ``` bash
    ./Bajar_Contenedor.sh Mi_SM
    ```

# 4. Automatización local

## Parámetros

En el directorio de Trabajo contamos con scripts bash que automatizan el tejido de los cuadernos.

Para ejecutar los scripts abrir una terminal en el directorio de Trabajo. Los scripts usan los dos primeros parámetros como directorios de entrada y salida respectivamente.

Si se usan directorios de Windows tener en cuenta que su dirección en WSL2 es de la forma

`~/win_home/Documents`

ó directamente

`/mnt/c/Users/<usuario>/Documents...`

## Modelado

Para desarrollar un modelo debemos correr primero Modelar.sh, luego copiar Modelo.zip al directorio de entrada usado por Validar_Desa.sh y correr este último script. El directorio de salida contendrá la versión actualizada de Modelo.zip.

### Modelar.sh

``` bash
./Modelar.sh --input-dir <dir_in> [--output-dir <dir_out>]  [--help]
```

#### Pasos

1.  El script usa los archivos 'Muestra_Desarrollo.txt' y 'Control de SmartModelStudio.xlsx/.json' en dir_in. Si existen las versiones .xlsx y .json de este último, usa la versión .xlsx.

2.  Levanta un contenedor efímero, ejecuta los Cuadernos de Limpieza y Modelado.

3.  Copia los resultados en dir_out incluyendo Reportes, Modelo.zip y logs de salida y errores.

4.  Si no se proporciona dir_out se asume dir_in.

#### Esquema

```{mermaid}
flowchart TB   
  subgraph Dir_In[Directorio Entrada]
    direction TB
      i1(Parámetros <br> Control de SmartModelStudio.xlsx o json*) 
      i2(Muestra Desarrollo <br> data_source_delim_path)
  end
  subgraph Dir_Out[Directorio Salida]
    direction TB
    E[Reportes Limp,Tr y Mod. <br> Clean-Transf.html Modelling.html <br> WoE * discretization.html]
    F[Logs <br> results_clean_transf.log results_modelling.log]
    Modelo.zip
  end
  subgraph Mod[Modelo.zip]
    direction TB
    m1[Mod en SQL <br> sent.sql]
    m11[Muestra Desarrollo con Scores <br> df_con_scores.Rdat]
    m2[Formatos y ids <br> adic_data.rds]
    m3[Coef Mod <br> Tab_Coef.Rdat]
    m4[Binning Vars <br> VarsContDiscretizadas.Rdat VarsFactDiscretizadas.Rdat]
    m5[Tabla Performance Desarrollo <br> tabPerfOrig.Rdat]
    m6[Detalle IVs de candidatas -<i>si par_quick==0</i> - <br> Estab_ivs_cand_InS.Rdat]
  end 
  subgraph sh[Modelar.sh]
    s1(Clean-Transf.qmd) --> s2(Modelling.qmd)
  end
  Dir_In --> sh --> Mod 
  sh --> Dir_Out
  Mod --> Dir_Out 
```

### Validar_Desa.sh

``` bash
./Validar_Desa.sh --input-dir <dir_in> [--output-dir <dir_out>]  [--help]
```

#### Pasos

El script busca los archivos 'Control de SmartModelStudio.xlsx/.json', Modelo.zip y 'Muestra_Desarrollo.txt' en dir_in.

1.  Levanta un contenedor efímero, ejecuta el Cuaderno de Validación de Muestra de Desarrollo.

2.  Copia los resultados en dir_out incluyendo el Reporte, la **actualización** de Modelo.zip, logs de salida y errores.

3.  Si no se proporciona dir_out se asume dir_in.

#### Esquema

```{mermaid}
flowchart TB   
  subgraph Dir_In[Directorio Entrada]
    direction TB
      i1(Parámetros <br> Control de SmartModelStudio.xlsx o json*) 
      i2(Muestra Desarrollo <br> data_source_delim_path)
      i3(Modelo <br> Modelo.zip)
  end
  subgraph Dir_Out[Directorio Salida]
    direction TB
    E[Reporte Validación en Desarrollo <br> Validation_InS.html]
    F[Logs <br> results_valid_insample.log]
    Modelo.zip
  end
  subgraph Mod[Modelo.zip]
    direction TB
    m1[Mod en SQL <br> sent.sql]
    m11[Muestra Desarrollo con Scores <br> df_con_scores.Rdat]
    m2[Formatos y ids <br> adic_data.rds]
    m3[Coef Mod <br> Tab_Coef.Rdat]
    m4[Binning Vars <br> VarsContDiscretizadas.Rdat VarsFactDiscretizadas.Rdat]
    m5[Tabla Performance Desarrollo <br> tabPerfOrig.Rdat]
    m6[<b> Niveles de Riesgo y Segmentos </b> <br> tab_niv_y_rel.Rdat]
    m7[Detalle IVs modelo <br> Estab_ivs_mod_InS.Rdat]
  end 
  subgraph sh[Validar_Desa.sh]
    s1(Validation_InS.qmd)
  end
  Dir_In --> sh --> Mod 
  sh --> Dir_Out
  Mod --> Dir_Out 
```

## Producción

Con la versión del Modelo en Modelo.zip calculamos los scores con Scoring.sh y evaluamos el modelo con Validar_Nueva.sh. Scoring.sh requiere 'Muestra_Scoring.txt' mientras Validar_Nueva.sh requiere 'Muestra_Validación.txt'. Este última muestra debe contener la variable indicada con el parámetro `par_target`.

### Scoring.sh

``` bash
./Scoring.sh --input-dir <dir_in> [--output-dir <dir_out>] [--help]
```

#### Pasos

1.  El script busca los archivos 'Control de SmartModelStudio.xlsx/.json', Modelo.zip, 'Muestra_Desarrollo.txt' y 'Muestra_Scoring.txt' en dir_in.

2.  Levanta un contenedor efímero, ejecuta el Cuaderno de Scoring.

3.  Copia los resultados en dir_out incluyendo Score.txt, Reporte, logs de salida y errores.

4.  Si no se proporciona dir_out se asume dir_in.

#### Esquema

```{mermaid}
flowchart TB   
  subgraph Dir_In[Directorio Entrada]
    direction TB
      i1(Parámetros <br> Control de SmartModelStudio.xlsx o json*) 
      i2(Muestra Desarrollo <br> data_source_delim_path)      
      i3(Muestra Scoring <br> data_source_scoring_delim_path)
      i4(Modelo <br> Modelo.zip)
  end
  subgraph Dir_Out[Directorio Salida]
    direction TB
    G[Scores <br> Scores.txt]
    E[Reporte Scoring <br> Scoring.html]
    F[Logs <br> results_scoring.log]
  end
  subgraph sh[Scoring.sh]
    s1(Scoring.qmd)
  end
  Dir_In --> sh --> Dir_Out
```

### Validar_Nueva.sh

``` bash
./Validar_Nueva.sh --input-dir <dir_in> [--output-dir <dir_out>]  [--help]
```

#### Pasos

1.  El script busca los archivos 'Control de SmartModelStudio.xlsx/.json', Modelo.zip y 'Muestra_Validación.txt' en dir_in.

2.  Levanta un contenedor efímero, ejecuta el Cuaderno de Validación de Nueva Muestra.

3.  Copia los resultados en dir_out incluyendo Scores_OoS, Reporte, logs de salida y errores.

4.  Si no se proporciona dir_out se asume dir_in.

#### Esquema

```{mermaid}
flowchart TB   
  subgraph Dir_In[Directorio Entrada]
    direction TB
      i1(Parámetros <br> Control de SmartModelStudio.xlsx o json*) 
      i2(Muestra Nueva con target <br> data_source_val_delim_path)
      i3(Modelo <br> Modelo.zip)
  end
  subgraph Dir_Out[Directorio Salida]
    direction TB
    E[Reporte Validación en Nueva Muestra <br> Validation_OoS.html]
    F[Logs <br> results_valid_newsample.log]
    G[Nueva Muestra con Scores <br> Scores_OoS.Rdat]
    H[Detalle IVs modelo en Nueva <br> Estab_ivs_mod_OoS.Rdat]
  end
  subgraph sh[Validar_Nueva.sh]
    s1(Validation_OsS.qmd)
  end
  Dir_In --> sh --> Dir_Out 
```

### Tablero_IV.sh

``` bash
./Tablero_IV.sh --input-dir <dir_in> [--output-dir <dir_out>]  [--help]
```

#### Pasos

1.  El script busca los archivos 'Control de SmartModelStudio.xlsx/.json', Modelo.zip *actualizado* por Validar_Desa y opcionalmente múltiples archivos con el patrón 'Estab_ivs_*.Rdat' en dir_in. 

2.  Levanta un contenedor efímero, y un puerto local efímero.  Ejecuta el tablero de Exploración de IV y abre un browser en el puerto efímero para mostrarlo.  

3. Cuando el usuario presiona el botón "Salir", baja el contenedor efímero. 

3.  Copia los resultados logs de salida y errores.

4.  Si no se proporciona dir_out se asume dir_in.

#### Esquema

```{mermaid}
flowchart TB   
  subgraph Dir_In[Directorio Entrada]
    direction TB
      i1(Parámetros <br> Control de SmartModelStudio.xlsx o json*) 
      i2(Reportes IVs <br> Estab_ivs_*.Rdat)
      i3(Modelo <br> Modelo.zip)
  end
  subgraph Dir_Out[Directorio Salida]
    direction TB
    F[Logs <br> results_dashboard.log]
  end
  subgraph sh[Tablero_IV.sh]
    s1(Explorador_Estab_ivs.qmd)
  end
  Dir_In --> sh --> Dir_Out 
```


# 5. Automatización en dockersrv

Contamos con los scripts anteriores también en el dockersrv.

Para usarlos primero requerimos instalar un key file por única vez.

## Instalación key file

1.  Abrir una terminal Linux en el directorio de Trabajo. Verificar la presencia de los archivos con nombre `id_consultor`. Estos archivos forman parte de `Automat.zip`.

2.  Copiar esos archivos al directorio \~/.ssh

    ``` bash
    cp id_consultor* ~/.ssh
    ```

## Ejecución de scripts

### Configuración sesión

La ejecución remota requiere una autenticación por sesión.

1.  Abrir una terminal en el directorio de Trabajo.

2.  Iniciar el agente ssh

    ``` bash
    eval "$(ssh-agent -s)"
    ```

3.  Agregar el key file

    ``` bash
    ssh-add ~/.ssh/id_consultor
    ```

4.  Entrar passphrase.

5.  La autenticación es válida para la sesión de la terminal.

Los mismos scripts de la sección anterior se pueden ejecutar en el dockersrv mediante el script `Ejecutar_dockersrv.sh`.

### Sintaxis

```         
./Ejecutar_dockersrv.sh --remote_script <remote_script> --dir_in <dir_in> [--dir_out <dir_out>] [--help]
```

### Ejemplo

```         
./Ejecutar_dockersrv.sh --remote_script Modelar.sh --dir_in ./Entrada --dir_out ./Salida
```

Realiza lo siguiente:

1.  El script busca los archivos 'Control de SmartModelStudio.xlsx' (ó json a futuro) y 'Muestra_Desarrollo.txt' en dir_in.

2.  Levanta un contenedor efímero.

3.  Copia los datos de dir_in a un directorio temporal en dockersrv.

4.  Ejecuta los Cuadernos de Limpieza y Modelado.

5.  Copia los resultados desde el dockersrv en dir_out incluyendo Reportes, Modelo.zip y logs de salida y errores.

Los otros scripts se ejecutan de la misma manera.

Notemos que si bien en este modo de uso no necesitamos instalar Docker de manera local hasta no contar con más recursos no se recomienda esta práctica.
